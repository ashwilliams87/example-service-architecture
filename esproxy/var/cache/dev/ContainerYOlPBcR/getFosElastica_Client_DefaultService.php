<?php

namespace ContainerYOlPBcR;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getFosElastica_Client_DefaultService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'fos_elastica.client.default' shared service.
     *
     * @return \FOS\ElasticaBundle\Elastica\Client
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/ruflin/elastica/src/Client.php';
        include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/elastica-bundle/src/Elastica/Client.php';
        include_once \dirname(__DIR__, 4).'/vendor/friendsofsymfony/elastica-bundle/src/Logger/ElasticaLogger.php';

        $container->privates['fos_elastica.client.default'] = $instance = new \FOS\ElasticaBundle\Elastica\Client(['connections' => [['url' => 'http://192.168.0.106:9200/', 'username' => $container->getEnv('ELASTICSEARCH_USER'), 'password' => $container->getEnv('ELASTICSEARCH_PASSWORD'), 'http_error_codes' => [400, 403, 404], 'ssl' => false, 'logger' => 'fos_elastica.logger', 'compression' => false, 'headers' => [], 'curl' => [], 'retryOnConflict' => 0, 'persistent' => true]], 'connectionStrategy' => 'Simple'], NULL);

        $instance->setStopwatch(($container->services['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
        $instance->setEventDispatcher(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
        $instance->setLogger(new \FOS\ElasticaBundle\Logger\ElasticaLogger(($container->privates['logger'] ?? self::getLoggerService($container)), true));

        return $instance;
    }
}
