<?php

namespace App\Services\Security;

use App\Services\Contracts\Security\SecurityServiceInterface;
use Ebs\Model\Subscriber;
use Ebs\Security\Ebs as EbsSecurity;
use Ice\Core\Exception;
use Ice\Core\Security;
use Ice\Helper\Date;
use Ice\Model\User;
use Lan\Security\Helper\Security as SecurityHelper;

class SecurityService implements SecurityServiceInterface
{
    private Security $security;

    /**
     * @throws Exception
     */
    public function __construct()
    {
         $this->security = EbsSecurity::getInstance();
    }

    public function getUser(): User{
        return $this->security->getUser();
    }

    public function isAuth(): bool{
        return $this->security->isAuth();
    }
    public function getSecurityInstance(): Security
    {
        return $this->security;
    }

    public function getSubscriber(): ?Subscriber
    {
        return $this->security->getSubscriber();
    }

    public function isUserActive(): bool
    {
        $expiredAt = $this->getUserExpiredDate();
        return !Date::expired($expiredAt);
    }

    public function getUserExpiredDate(): string
    {
        return $this->getUser()
            ->get('/expired_at');
    }

    public function call($routeName, array $params = []): string|array
    {
        return SecurityHelper::call($routeName, $params);
    }

    public function check($roles = []): bool
    {
        return $this->security->check($roles);
    }
}
